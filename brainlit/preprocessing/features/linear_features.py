import numpy as np
import brainlit
from brainlit.preprocessing import preprocess, image_process
from scipy import ndimage as ndi
from pathlib import Path
import pandas as pd
from itertools import product

from .base import BaseFeatures


class LinearFeatures(BaseFeatures):
    """
    Computes features based off linear filters.
    """

    def __init__(self, url, size=[1, 1, 1], offset=[15, 15, 15]):
        super().__init__(url=url, size=size, offset=offset)

    def _convert_to_features(self, img):
        """
        Computes features from image data by applying linear filters.

        Parameters
        ----------
        img : ndarray
            Image data.

        Returns
        -------
        features : ndarray
            Feature data generated by applying linear filters.
        """
        voxel = (np.subtract(img.shape, 1) / 2).astype(int)
        g = ndi.gaussian_filter(img, [1, 1, 0.3])
        g = float(g[[voxel[0]], [voxel[1]], [voxel[2]]])

        gg = ndi.gaussian_gradient_magnitude(img, [1, 1, 0.3])
        gg = float(gg[[voxel[0]], [voxel[1]], [voxel[2]]])

        gl = ndi.gaussian_laplace(img, [1, 1, 0.3])
        gl = float(gl[[voxel[0]], [voxel[1]], [voxel[2]]])
        return {"Gausssian": g, "Gaussian Gradient": gg, "Gaussian Laplacian": gl}
